.. _developer_guide:

Developer guide
===============


Developer Install
*****************

This package can be installed through the following commands:

.. code-block:: bash

    ## Update to real URL !
    git clone https://github.com/CNES/pandora_plugin_arnn
    cd pandora_plugin_arnn
    make install
    source venv/bin/activate # to go in installed dev environment

Dependencies : **git**, **make**

Packages is available in virtualenv in developer mode !

Please use **make help** to use all preconfigured possibilities.

Coding guide
************

Here are some rules to apply when developing a new functionality:

* **Comments:** Include a comments ratio high enough and use explicit variables names. A comment by code block of several lines is necessary to explain a new functionality.
* **Test**: Each new functionality shall have a corresponding test in its module's test file. This test shall, if possible, check the function's outputs and the corresponding degraded cases.
* **Documentation**: All functions shall be documented (object, parameters, return values).
* **Use type hints**: Use the type hints provided by the `typing` python module.
* **Use doctype**: Follow sphinx default doctype for automatic API
* **Quality code**: Correct project quality code errors with pre-commit automatic workflow (see below)
* **Factorization**: Factorize the code as much as possible. The command line tools shall only include the main workflow and rely on the **pandora_plugin_arnn** python modules.
* **Be careful with user interface upgrade:** If major modifications of the user interface or of the tool's behaviour are done, update the user documentation (and the notebooks if necessary).
* **Logging and no print**: The usage of the `print()` function is forbidden: use the `logging` python standard module instead.
* **Limit classes**: If possible, limit the use of classes as much as possible and opt for a functional approach. The classes are reserved for data modelling if it is impossible to do so using `xarray` and for the good level of modularity.
* **Limit new dependencies**: Do not add new dependencies unless it is absolutely necessary, and only if it has a **permissive license**.


Tests
*****

pandora_plugin_arnn includes a set of tests executed with `pytest <https://docs.pytest.org/>`_ tool.

To launch tests:

.. code-block:: bash

    make test

It launches the unit tests present in `pandora_plugin_arnn/tests/test_pandora_plugin_arnn.py` displaying the traces generated by the tests and the tests code coverage level.

During the tests execution, pandora_plugin_arnn will write the output data in a */tmp* directory.

Documentation
*************

pandora_plugin_arnn documentation can be generated with following command:

.. code-block:: bash

    make docs

It cleans documentation from *docs/build/* directory and builds the sphinx documentation from *docs/source/* into *docs/build/*:

.. code-block:: bash

    sphinx-build -M clean docs/source/ docs/build
    sphinx-build -M html docs/source/ docs/build

Pre-commit validation
*********************

A pre-commit validation is installed with code quality tools (see below).
It is installed automatically by `make install-dev` command.

Here is the way to install it manually:

.. code-block:: console

  $ pre-commit install -t pre-commit
  $ pre-commit install -t pre-push

This installs the pre-commit hook in `.git/hooks/pre-commit` and `.git/hooks/pre-push` from `.pre-commit-config.yaml <https://raw.githubusercontent.com/CNES/pandora_plugin_arnn/master/.pre-commit-config.yaml>`_ file configuration.

It is possible to test pre-commit before commiting:

.. code-block:: console

  $ pre-commit run --all-files                # Run all hooks on all files
  $ pre-commit run --files pandora_plugin_arnn/__init__.py   # Run all hooks on one file
  $ pre-commit run pylint                     # Run only pylint hook
  $ pre-commit run --hook-stage push --all-files # Run with push hook


Code quality
************

The project uses `Isort`_, `Black`_, `Flake8`_ and `Pylint`_ quality code checking.

Use the following command in `virtualenv` to check the code with these tools:

.. code-block:: console

    $ make lint

Use the following command to format the code with isort and black:

.. code-block:: console

    $ make format

Isort
-----
`Isort`_ is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type.

``isort`` configuration is done in `.pyproject.toml <https://raw.githubusercontent.com/CNES/pandora_plugin_arnn/master/pyproject.toml>`_
`Isort`_ manual usage examples:

.. code-block:: console

    $ cd pandora_plugin_arnn_HOME
    $ isort --check pandora_plugin_arnn tests  # Check code with isort, does nothing
    $ isort --diff pandora_plugin_arnn tests   # Show isort diff modifications
    $ isort pandora_plugin_arnn tests          # Apply modifications

`Isort`_ messages can be avoided when really needed with *"# isort:skip"* on the incriminated line.

Black
-----
`Black`_ is a quick and deterministic code formatter to help focus on the content.

``black`` configuration is done in `.pyproject.toml <https://raw.githubusercontent.com/CNES/pandora_plugin_arnn/master/pyproject.toml>`_

If necessary, Black doesnâ€™t reformat blocks that start with "# fmt: off" and end with # fmt: on, or lines that ends with "# fmt: skip". "# fmt: on/off" have to be on the same level of indentation.

`Black`_ manual usage examples:

.. code-block:: console

    $ cd pandora_plugin_arnn_HOME
    $ black --check pandora_plugin_arnn tests  # Check code with black with no modifications
    $ black --diff pandora_plugin_arnn tests   # Show black diff modifications
    $ black pandora_plugin_arnn tests          # Apply modifications

Flake8
------
`Flake8`_ is a command-line utility for enforcing style consistency across Python projects. By default it includes lint checks provided by the PyFlakes project, PEP-0008 inspired style checks provided by the PyCodeStyle project, and McCabe complexity checking provided by the McCabe project. It will also run third-party extensions if they are found and installed.

``flake8`` configuration is done in `setup.cfg <https://raw.githubusercontent.com/CNES/pandora_plugin_arnn/master/setup.cfg>`_

`Flake8`_ messages can be avoided (in particular cases !) adding "# noqa" in the file or line for all messages.
It is better to choose filter message with "# noqa: E731" (with E371 example being the error number).
Look at examples in source code.

Flake8 manual usage examples:

.. code-block:: console

  $ cd pandora_plugin_arnn_HOME
  $ flake8 pandora_plugin_arnn tests           # Run all flake8 tests


Pylint
------
`Pylint`_ is a global linting tool which helps to have many information on source code.

``pylint`` configuration is done in dedicated `.pylintrc <https://raw.githubusercontent.com/CNES/pandora_plugin_arnn/master/.pylintrc>`_ file.

`Pylint`_ messages can be avoided (in particular cases !) adding "# pylint: disable=error-message-name" in the file or line.
Look at examples in source code.

Pylint manual usage examples:

.. code-block:: console

  $ cd pandora_plugin_arnn_HOME
  $ pylint tests pandora_plugin_arnn       # Run all pylint tests
  $ pylint --list-msgs          # Get pylint detailed errors informations


Bug report
**********

Any proven or suspected malfunction should be traced in a bug report, the latter being an issue in the **pandora_plugin_arnn** github repository.

**Don't hesitate to do so: It is best to open a bug report and quickly resolve it than to let a problem remain in the project.**
**Notifying the potential bugs is the first way for contributing to a software.**

In the problem description, be as accurate as possible. Include:
 - The procedure used to initialize the environment
 - The incriminated command line or python function
 - The content of the input and output configuration files (*content.json*)

Contributing workflow
*********************

Any code modification requires a Merge Request. It is forbidden to push patches directly into master (this branch is protected).

It is recommended to open your Merge Request as soon as possible in order to inform the developers of your ongoing work.
Please add *WIP:* before your Merge Request title if your work is in progress: This prevents an accidental merge and informs the other developers of the unfinished state of your work.

The Merge Request shall have a short description of the proposed changes. If it is relative to an issue, you can signal it by adding *Closes xx* where xx is the reference number of the issue.

Likewise, if you work on a branch (which is recommended), prefix the branch's name by *xx-* in order to link it to the xx issue.

**pandora_plugin_arnn**'s Classical workflow is :
 - Check Licence and sign :ref:`contribution_license_agreement` (Individual or Corporate)
 - Create an issue (or begin from an existing one)
 - Create a Merge Request from the issue: a MR is created accordingly with *WIP:*, *Closes xx* and associated *xx-name-issue* branch
 - Modify **pandora_plugin_arnn**'s code from a local working directory or from the forge (less possibilities)
 - Git add, commit and push from local working clone directory or from the forge directly
 - Follow `Conventional commits <https://www.conventionalcommits.org/>`_ specifications for commit messages
 - Beware that pre-commit hooks can be installed for code analysis (see below pre-commit validation).
 - Launch the tests with pytest on your modifications (or don't forget to add ones).
 - When finished, change your Merge Request name (erase *WIP:* in title ) and ask to review the code.

.. _contribution_license_agreement:

Contribution license agreement
******************************

**pandora_plugin_arnn** requires that contributors sign out a `Contributor LicenseAgreement <https://en.wikipedia.org/wiki/Contributor_License_Agreement>`_.
The purpose of this CLA is to ensure that the project has the necessary ownership or
grants of rights over all contributions to allow them to distribute under the
chosen license (Apache License Version 2.0)

To accept your contribution, we need you to complete, sign and email to *cars@cnes.fr* an
`Individual Contributor LicensingAgreement <https://github.com/CNES/pandora_plugin_arnn/blob/master/docs/source/CLA/ICLA-pandora_plugin_arnn.doc>`_ (ICLA) form and a
`Corporate Contributor Licensing Agreement <https://github.com/CNES/pandora_plugin_arnn/blob/master/docs/source/CLA/CCLA-pandora_plugin_arnn.doc>`_ (CCLA) form if you are
contributing on behalf of your company or another entity which retains copyright
for your contribution.

The copyright owner (or owner's agent) must be mentioned in headers of all
modified source files and also added to the `AUTHORS.md file <https://github.com/CNES/pandora_plugin_arnn/blob/master/AUTHORS.md>`_.

